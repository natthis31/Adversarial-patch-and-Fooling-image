noise = torch.rand(1,3,224,224, device=device, requires_grad=True)
opt = torch.optim.Adam([noise], lr=0.05)
target = torch.tensor([1], device=device)      # 1 = Flower

def tv(x): return (torch.mean(torch.abs(x[:,:,1:]-x[:,:,:-1])) +
                   torch.mean(torch.abs(x[:,:,:,1:]-x[:,:,:,:-1])))

for s in range(4000):
    opt.zero_grad()
    loss = -loss_fn(net(noise), target) + 0.001*tv(noise)
    loss.backward(); opt.step()
    noise.data.clamp_(0,1)
    if s%800==0: print("step",s)

save_image(noise.cpu(), "fooling_flower.png")
print("âœ… fooling_flower.png")
